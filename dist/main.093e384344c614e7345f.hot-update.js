webpackHotUpdate("main",{

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PIXI = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/pixi.es.js");
1;
var Keyboard = /** @class */ (function () {
    function Keyboard() {
        var _this = this;
        this.keys = {};
        window.addEventListener('keydown', function (event) {
            _this.keys[event.code] = true;
        });
        window.addEventListener('keyup', function (event) {
            _this.keys[event.code] = false;
        });
    }
    Keyboard.prototype.isPressed = function (eventCode) {
        return this.keys[eventCode];
    };
    return Keyboard;
}());
var app = new PIXI.Application({
    width: 1280,
    height: 720,
    backgroundColor: 0x42a7f5
});
PIXI.Loader.shared.add('assets/img/textures.json').load(setup);
var keyboard = new Keyboard();
function setup() {
    PIXI.SCALE_MODES.DEFAULT = PIXI.SCALE_MODES.NEAREST;
    document.body.appendChild(app.view);
    // Textures
    var sheet = PIXI.Loader.shared.resources['assets/img/textures.json'].spritesheet;
    var playerTextures = [
        sheet.textures['player/player_00.png'],
        sheet.textures['player/player_01.png'],
        sheet.textures['player/player_02.png']
    ];
    var player = new PIXI.Sprite(playerTextures[0]);
    app.stage.addChild(player);
    player.position.x = app.stage.width / 2;
    player.position.y = app.stage.height / 2;
    player.scale = new PIXI.Point(8, 8);
    // Assign update function
    app.ticker.add(update);
}
function update(delta) {
    if (keyboard.isPressed('Space')) {
        console.log("Dou");
    }
    else {
        console.log("Mae");
    }
}


/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsdUZBQWdDO0FBRWhDLENBQUM7QUFDRDtJQUdJO1FBQUEsaUJBUUM7UUFWRCxTQUFJLEdBQTZCLEVBQUUsQ0FBQztRQUdoQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFVBQUMsS0FBb0I7WUFDcEQsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFDLEtBQW9CO1lBQ2xELEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCw0QkFBUyxHQUFULFVBQVUsU0FBaUI7UUFDdkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFDTCxlQUFDO0FBQUQsQ0FBQztBQUVELElBQU0sR0FBRyxHQUFxQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDL0MsS0FBSyxFQUFFLElBQUk7SUFDWCxNQUFNLEVBQUUsR0FBRztJQUNYLGVBQWUsRUFBRSxRQUFRO0NBQzVCLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUUvRCxJQUFNLFFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRSxDQUFDO0FBRTFDLFNBQVMsS0FBSztJQUNWLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO0lBRXBELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwQyxXQUFXO0lBQ1gsSUFBTSxLQUFLLEdBQXFCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUVyRyxJQUFNLGNBQWMsR0FBbUI7UUFDbkMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQztRQUN0QyxLQUFLLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO1FBQ3RDLEtBQUssQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUM7S0FDekMsQ0FBQztJQUVGLElBQUksTUFBTSxHQUFnQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0QsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN6QyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFcEMseUJBQXlCO0lBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxLQUFhO0lBQ3pCLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCO1NBQU07UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQyIsImZpbGUiOiJtYWluLjA5M2UzODQzNDRjNjE0ZTczNDVmLmhvdC11cGRhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQSVhJIGZyb20gJ3BpeGkuanMnO1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICd3ZWJwYWNrJztcbjFcbmNsYXNzIEtleWJvYXJkIHtcbiAgICBrZXlzOiB7IFtpZDogc3RyaW5nXTogYm9vbGVhbn0gPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5rZXlzW2V2ZW50LmNvZGVdID0gdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmtleXNbZXZlbnQuY29kZV0gPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaXNQcmVzc2VkKGV2ZW50Q29kZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXNbZXZlbnRDb2RlXTtcbiAgICB9XG59XG5cbmNvbnN0IGFwcDogUElYSS5BcHBsaWNhdGlvbiA9IG5ldyBQSVhJLkFwcGxpY2F0aW9uKHtcbiAgICB3aWR0aDogMTI4MCxcbiAgICBoZWlnaHQ6IDcyMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IDB4NDJhN2Y1XG59KTtcblxuUElYSS5Mb2FkZXIuc2hhcmVkLmFkZCgnYXNzZXRzL2ltZy90ZXh0dXJlcy5qc29uJykubG9hZChzZXR1cCk7XG5cbmNvbnN0IGtleWJvYXJkOiBLZXlib2FyZCA9IG5ldyBLZXlib2FyZCgpO1xuXG5mdW5jdGlvbiBzZXR1cCgpOiB2b2lkIHtcbiAgICBQSVhJLlNDQUxFX01PREVTLkRFRkFVTFQgPSBQSVhJLlNDQUxFX01PREVTLk5FQVJFU1Q7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFwcC52aWV3KTtcblxuICAgIC8vIFRleHR1cmVzXG4gICAgY29uc3Qgc2hlZXQ6IFBJWEkuU3ByaXRlc2hlZXQgPSBQSVhJLkxvYWRlci5zaGFyZWQucmVzb3VyY2VzWydhc3NldHMvaW1nL3RleHR1cmVzLmpzb24nXS5zcHJpdGVzaGVldDtcblxuICAgIGNvbnN0IHBsYXllclRleHR1cmVzOiBQSVhJLlRleHR1cmVbXSA9IFtcbiAgICAgICAgc2hlZXQudGV4dHVyZXNbJ3BsYXllci9wbGF5ZXJfMDAucG5nJ10sXG4gICAgICAgIHNoZWV0LnRleHR1cmVzWydwbGF5ZXIvcGxheWVyXzAxLnBuZyddLFxuICAgICAgICBzaGVldC50ZXh0dXJlc1sncGxheWVyL3BsYXllcl8wMi5wbmcnXVxuICAgIF07XG4gICAgXG4gICAgbGV0IHBsYXllcjogUElYSS5TcHJpdGUgPSBuZXcgUElYSS5TcHJpdGUocGxheWVyVGV4dHVyZXNbMF0pO1xuICAgIGFwcC5zdGFnZS5hZGRDaGlsZChwbGF5ZXIpO1xuICAgIHBsYXllci5wb3NpdGlvbi54ID0gYXBwLnN0YWdlLndpZHRoIC8gMjtcbiAgICBwbGF5ZXIucG9zaXRpb24ueSA9IGFwcC5zdGFnZS5oZWlnaHQgLyAyO1xuICAgIHBsYXllci5zY2FsZSA9IG5ldyBQSVhJLlBvaW50KDgsIDgpO1xuICAgIFxuICAgIC8vIEFzc2lnbiB1cGRhdGUgZnVuY3Rpb25cbiAgICBhcHAudGlja2VyLmFkZCh1cGRhdGUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChrZXlib2FyZC5pc1ByZXNzZWQoJ1NwYWNlJykpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJEb3VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJNYWVcIik7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==