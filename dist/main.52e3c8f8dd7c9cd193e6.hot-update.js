webpackHotUpdate("main",{

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PIXI = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/pixi.es.js");
1;
var Keyboard = /** @class */ (function () {
    function Keyboard() {
        var _this = this;
        this.keys = {};
        window.addEventListener('keydown', function (event) {
            _this.keys[event.code] = true;
        });
        window.addEventListener('keyup', function (event) {
            _this.keys[event.code] = false;
        });
    }
    Keyboard.prototype.isPressed = function (eventCode) {
        return this.keys[eventCode];
    };
    return Keyboard;
}());
var app = new PIXI.Application({
    width: 1280,
    height: 720,
    backgroundColor: 0x42a7f5
});
PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;
PIXI.Loader.shared.add('assets/img/textures.json').load(setup);
var keyboard = new Keyboard();
var player;
var playerTextures;
function setup() {
    document.body.appendChild(app.view);
    // Textures
    var sheet = PIXI.Loader.shared.resources['assets/img/textures.json'].spritesheet;
    playerTextures = [
        sheet.textures['player/player_00.png'],
        sheet.textures['player/player_01.png'],
        sheet.textures['player/player_02.png']
    ];
    player: PIXI.Sprite = new PIXI.Sprite(playerTextures[0]);
    app.stage.addChild(player);
    player.position.x = app.stage.width / 2;
    player.position.y = app.stage.height / 2;
    player.scale = new PIXI.Point(8, 8);
    // Assign update function
    app.ticker.add(update);
}
function update(delta) {
    if (keyboard.isPressed('Space')) {
        player.texture = playerTextures[0];
    }
    else {
        console.log("Mae");
    }
}


/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsdUZBQWdDO0FBRWhDLENBQUM7QUFDRDtJQUdJO1FBQUEsaUJBUUM7UUFWRCxTQUFJLEdBQTZCLEVBQUUsQ0FBQztRQUdoQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFVBQUMsS0FBb0I7WUFDcEQsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFDLEtBQW9CO1lBQ2xELEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCw0QkFBUyxHQUFULFVBQVUsU0FBaUI7UUFDdkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFDTCxlQUFDO0FBQUQsQ0FBQztBQUVELElBQU0sR0FBRyxHQUFxQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDL0MsS0FBSyxFQUFFLElBQUk7SUFDWCxNQUFNLEVBQUUsR0FBRztJQUNYLGVBQWUsRUFBRSxRQUFRO0NBQzVCLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO0FBRXBELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUUvRCxJQUFNLFFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRSxDQUFDO0FBRTFDLElBQUksTUFBbUIsQ0FBQztBQUN4QixJQUFJLGNBQThCLENBQUM7QUFFbkMsU0FBUyxLQUFLO0lBQ1YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXBDLFdBQVc7SUFDWCxJQUFNLEtBQUssR0FBcUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUMsV0FBVyxDQUFDO0lBRXJHLGNBQWMsR0FBRztRQUNiLEtBQUssQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUM7UUFDdEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQztRQUN0QyxLQUFLLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO0tBQ3pDLENBQUM7SUFFRixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN6QyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFcEMseUJBQXlCO0lBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxLQUFhO0lBQ3pCLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUM3QixNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0QztTQUFNO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN0QjtBQUNMLENBQUMiLCJmaWxlIjoibWFpbi41MmUzYzhmOGRkN2M5Y2QxOTNlNi5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUElYSSBmcm9tICdwaXhpLmpzJztcbmltcG9ydCB7IGRlYnVnIH0gZnJvbSAnd2VicGFjayc7XG4xXG5jbGFzcyBLZXlib2FyZCB7XG4gICAga2V5czogeyBbaWQ6IHN0cmluZ106IGJvb2xlYW59ID0ge307XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMua2V5c1tldmVudC5jb2RlXSA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5rZXlzW2V2ZW50LmNvZGVdID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlzUHJlc3NlZChldmVudENvZGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlzW2V2ZW50Q29kZV07XG4gICAgfVxufVxuXG5jb25zdCBhcHA6IFBJWEkuQXBwbGljYXRpb24gPSBuZXcgUElYSS5BcHBsaWNhdGlvbih7XG4gICAgd2lkdGg6IDEyODAsXG4gICAgaGVpZ2h0OiA3MjAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAweDQyYTdmNVxufSk7XG5cblBJWEkuc2V0dGluZ3MuU0NBTEVfTU9ERSA9IFBJWEkuU0NBTEVfTU9ERVMuTkVBUkVTVDtcblxuUElYSS5Mb2FkZXIuc2hhcmVkLmFkZCgnYXNzZXRzL2ltZy90ZXh0dXJlcy5qc29uJykubG9hZChzZXR1cCk7XG5cbmNvbnN0IGtleWJvYXJkOiBLZXlib2FyZCA9IG5ldyBLZXlib2FyZCgpO1xuXG5sZXQgcGxheWVyOiBQSVhJLlNwcml0ZTtcbmxldCBwbGF5ZXJUZXh0dXJlczogUElYSS5UZXh0dXJlW107XG5cbmZ1bmN0aW9uIHNldHVwKCk6IHZvaWQge1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYXBwLnZpZXcpO1xuXG4gICAgLy8gVGV4dHVyZXNcbiAgICBjb25zdCBzaGVldDogUElYSS5TcHJpdGVzaGVldCA9IFBJWEkuTG9hZGVyLnNoYXJlZC5yZXNvdXJjZXNbJ2Fzc2V0cy9pbWcvdGV4dHVyZXMuanNvbiddLnNwcml0ZXNoZWV0O1xuXG4gICAgcGxheWVyVGV4dHVyZXMgPSBbXG4gICAgICAgIHNoZWV0LnRleHR1cmVzWydwbGF5ZXIvcGxheWVyXzAwLnBuZyddLFxuICAgICAgICBzaGVldC50ZXh0dXJlc1sncGxheWVyL3BsYXllcl8wMS5wbmcnXSxcbiAgICAgICAgc2hlZXQudGV4dHVyZXNbJ3BsYXllci9wbGF5ZXJfMDIucG5nJ11cbiAgICBdO1xuICAgIFxuICAgIHBsYXllcjogUElYSS5TcHJpdGUgPSBuZXcgUElYSS5TcHJpdGUocGxheWVyVGV4dHVyZXNbMF0pO1xuICAgIGFwcC5zdGFnZS5hZGRDaGlsZChwbGF5ZXIpO1xuICAgIHBsYXllci5wb3NpdGlvbi54ID0gYXBwLnN0YWdlLndpZHRoIC8gMjtcbiAgICBwbGF5ZXIucG9zaXRpb24ueSA9IGFwcC5zdGFnZS5oZWlnaHQgLyAyO1xuICAgIHBsYXllci5zY2FsZSA9IG5ldyBQSVhJLlBvaW50KDgsIDgpO1xuICAgIFxuICAgIC8vIEFzc2lnbiB1cGRhdGUgZnVuY3Rpb25cbiAgICBhcHAudGlja2VyLmFkZCh1cGRhdGUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChrZXlib2FyZC5pc1ByZXNzZWQoJ1NwYWNlJykpIHtcbiAgICAgICAgcGxheWVyLnRleHR1cmUgPSBwbGF5ZXJUZXh0dXJlc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk1hZVwiKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9