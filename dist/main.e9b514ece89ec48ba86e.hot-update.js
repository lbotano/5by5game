webpackHotUpdate("main",{

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PIXI = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/pixi.es.js");
var Keyboard = /** @class */ (function () {
    function Keyboard() {
        var _this = this;
        this.keys = {};
        window.addEventListener('keydown', function (event) {
            _this.keys[event.code] = true;
        });
        window.addEventListener('keyup', function (event) {
            _this.keys[event.code] = false;
        });
    }
    Keyboard.prototype.isPressed = function (eventCode) {
        return this.keys[eventCode];
    };
    return Keyboard;
}());
var Game = /** @class */ (function () {
    function Game() {
        this.keyboard = new Keyboard();
        this.keyboard = new Keyboard();
        app = new PIXI.Application({
            width: 1280,
            height: 720,
            backgroundColor: 0x42a7f5
        });
        PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;
        PIXI.Loader.shared.add('assets/img/textures.json').load(setup);
    }
    return Game;
}());
var player;
var playerTextures;
function setup() {
    document.body.appendChild(app.view);
    // Textures
    var sheet = PIXI.Loader.shared.resources['assets/img/textures.json'].spritesheet;
    playerTextures = [
        sheet.textures['player/player_00.png'],
        sheet.textures['player/player_01.png'],
        sheet.textures['player/player_02.png']
    ];
    player = new PIXI.Sprite(playerTextures[0]);
    app.stage.addChild(player);
    player.position.x = app.renderer.width / 2;
    player.position.y = app.renderer.height / 2;
    player.scale = new PIXI.Point(8, 8);
    console.log(app.renderer.width / 2);
    console.log(app.renderer.height / 2);
    // Assign update function
    app.ticker.add(update);
}
function update(delta) {
    if (keyboard.isPressed('Space')) {
        player.texture = playerTextures[0];
    }
    else {
        player.texture = playerTextures[2];
    }
}


/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsdUZBQWdDO0FBR2hDO0lBR0k7UUFBQSxpQkFRQztRQVZELFNBQUksR0FBNkIsRUFBRSxDQUFDO1FBR2hDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsVUFBQyxLQUFvQjtZQUNwRCxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBb0I7WUFDbEQsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELDRCQUFTLEdBQVQsVUFBVSxTQUFpQjtRQUN2QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUNMLGVBQUM7QUFBRCxDQUFDO0FBQ0Q7SUFRSTtRQUxNLGFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBY3BDLGFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBUnRDLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDdkIsS0FBSyxFQUFFLElBQUk7WUFDWCxNQUFNLEVBQUUsR0FBRztZQUNYLGVBQWUsRUFBRSxRQUFRO1NBQzVCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBR0QsV0FBQztBQUFELENBQUMsSUFGeUM7QUFFMUMsSUFBSSxNQUFtQixDQUFDO0FBQ3hCLElBQUksY0FBOEIsQ0FBQztBQUVuQyxTQUFTLEtBQUs7SUFDVixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFcEMsV0FBVztJQUNYLElBQU0sS0FBSyxHQUFxQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFFckcsY0FBYyxHQUFHO1FBQ2IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQztRQUN0QyxLQUFLLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO1FBQ3RDLEtBQUssQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUM7S0FDekMsQ0FBQztJQUVGLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUM1QyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXJDLHlCQUF5QjtJQUN6QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsS0FBYTtJQUN6QixJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDN0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEM7U0FBTTtRQUNILE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RDO0FBQ0wsQ0FBQyIsImZpbGUiOiJtYWluLmU5YjUxNGVjZTg5ZWM0OGJhODZlLmhvdC11cGRhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQSVhJIGZyb20gJ3BpeGkuanMnO1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICd3ZWJwYWNrJztcblxuY2xhc3MgS2V5Ym9hcmQge1xuICAgIGtleXM6IHsgW2lkOiBzdHJpbmddOiBib29sZWFufSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmtleXNbZXZlbnQuY29kZV0gPSB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMua2V5c1tldmVudC5jb2RlXSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc1ByZXNzZWQoZXZlbnRDb2RlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5c1tldmVudENvZGVdO1xuICAgIH1cbn1cbmNsYXNzIEdhbWUge1xuICAgIGFwcDogUElYSS5BcHBsaWNhdGlvbjtcblxuICAgIGNvbnN0IGtleWJvYXJkOiBLZXlib2FyZCA9IG5ldyBLZXlib2FyZCgpO1xuXG4gICAgcGxheWVyOiBQSVhJLlNwcml0ZTtcbiAgICBwbGF5ZXJUZXh0dXJlczogUElYSS5UZXh0dXJlW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgYXBwID0gbmV3IFBJWEkuQXBwbGljYXRpb24oe1xuICAgICAgICAgICAgd2lkdGg6IDEyODAsXG4gICAgICAgICAgICBoZWlnaHQ6IDcyMCxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogMHg0MmE3ZjVcbiAgICAgICAgfSk7XG4gICAgICAgIFBJWEkuc2V0dGluZ3MuU0NBTEVfTU9ERSA9IFBJWEkuU0NBTEVfTU9ERVMuTkVBUkVTVDtcbiAgICAgICAgUElYSS5Mb2FkZXIuc2hhcmVkLmFkZCgnYXNzZXRzL2ltZy90ZXh0dXJlcy5qc29uJykubG9hZChzZXR1cCk7XG4gICAgfVxuICAgIGNvbnN0IGtleWJvYXJkOiBLZXlib2FyZCA9IG5ldyBLZXlib2FyZCgpO1xuXG4gICAgbGV0IHBsYXllcjogUElYSS5TcHJpdGU7XG4gICAgbGV0IHBsYXllclRleHR1cmVzOiBQSVhJLlRleHR1cmVbXTtcblxuICAgIGZ1bmN0aW9uIHNldHVwKCk6IHZvaWQge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFwcC52aWV3KTtcblxuICAgICAgICAvLyBUZXh0dXJlc1xuICAgICAgICBjb25zdCBzaGVldDogUElYSS5TcHJpdGVzaGVldCA9IFBJWEkuTG9hZGVyLnNoYXJlZC5yZXNvdXJjZXNbJ2Fzc2V0cy9pbWcvdGV4dHVyZXMuanNvbiddLnNwcml0ZXNoZWV0O1xuXG4gICAgICAgIHBsYXllclRleHR1cmVzID0gW1xuICAgICAgICAgICAgc2hlZXQudGV4dHVyZXNbJ3BsYXllci9wbGF5ZXJfMDAucG5nJ10sXG4gICAgICAgICAgICBzaGVldC50ZXh0dXJlc1sncGxheWVyL3BsYXllcl8wMS5wbmcnXSxcbiAgICAgICAgICAgIHNoZWV0LnRleHR1cmVzWydwbGF5ZXIvcGxheWVyXzAyLnBuZyddXG4gICAgICAgIF07XG4gICAgICAgIFxuICAgICAgICBwbGF5ZXIgPSBuZXcgUElYSS5TcHJpdGUocGxheWVyVGV4dHVyZXNbMF0pO1xuICAgICAgICBhcHAuc3RhZ2UuYWRkQ2hpbGQocGxheWVyKTtcbiAgICAgICAgcGxheWVyLnBvc2l0aW9uLnggPSBhcHAucmVuZGVyZXIud2lkdGggLyAyO1xuICAgICAgICBwbGF5ZXIucG9zaXRpb24ueSA9IGFwcC5yZW5kZXJlci5oZWlnaHQgLyAyO1xuICAgICAgICBwbGF5ZXIuc2NhbGUgPSBuZXcgUElYSS5Qb2ludCg4LCA4KTtcblxuICAgICAgICBjb25zb2xlLmxvZyhhcHAucmVuZGVyZXIud2lkdGggLyAyKTtcbiAgICAgICAgY29uc29sZS5sb2coYXBwLnJlbmRlcmVyLmhlaWdodCAvIDIpO1xuICAgICAgICBcbiAgICAgICAgLy8gQXNzaWduIHVwZGF0ZSBmdW5jdGlvblxuICAgICAgICBhcHAudGlja2VyLmFkZCh1cGRhdGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZShkZWx0YTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmIChrZXlib2FyZC5pc1ByZXNzZWQoJ1NwYWNlJykpIHtcbiAgICAgICAgICAgIHBsYXllci50ZXh0dXJlID0gcGxheWVyVGV4dHVyZXNbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbGF5ZXIudGV4dHVyZSA9IHBsYXllclRleHR1cmVzWzJdO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==